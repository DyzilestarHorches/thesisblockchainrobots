/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace MyContract {
  export type TaskStruct = {
    good: string;
    destination: string;
    assigner: string;
    stage: BigNumberish;
  };

  export type TaskStructOutput = [
    good: string,
    destination: string,
    assigner: string,
    stage: bigint
  ] & { good: string; destination: string; assigner: string; stage: bigint };
}

export interface MyContractInterface extends Interface {
  getFunction(nameOrSignature: "addTask" | "readTask"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addTask",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "readTask", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readTask", data: BytesLike): Result;
}

export interface MyContract extends BaseContract {
  connect(runner?: ContractRunner | null): MyContract;
  waitForDeployment(): Promise<this>;

  interface: MyContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addTask: TypedContractMethod<
    [good: string, destination: string, assigner: string],
    [void],
    "nonpayable"
  >;

  readTask: TypedContractMethod<[], [MyContract.TaskStructOutput[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addTask"
  ): TypedContractMethod<
    [good: string, destination: string, assigner: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "readTask"
  ): TypedContractMethod<[], [MyContract.TaskStructOutput[]], "view">;

  filters: {};
}
