/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace TaskAssigner {
  export type TaskStruct = {
    good: string;
    destination: string;
    assigner: BigNumberish;
    stage: BigNumberish;
  };

  export type TaskStructOutput = [
    good: string,
    destination: string,
    assigner: bigint,
    stage: bigint
  ] & { good: string; destination: string; assigner: bigint; stage: bigint };
}

export interface TaskAssignerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addTask"
      | "getOwnTask"
      | "readTasks"
      | "robots"
      | "roundRobin"
      | "tasks"
      | "updateTaskStatus"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DoneFindingFreeBots" | "DoneFindingNewTasks"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addTask",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnTask",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "readTasks", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "robots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "roundRobin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tasks", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "updateTaskStatus",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwnTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readTasks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "robots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roundRobin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tasks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTaskStatus",
    data: BytesLike
  ): Result;
}

export namespace DoneFindingFreeBotsEvent {
  export type InputTuple = [freeBotsID: BigNumberish[]];
  export type OutputTuple = [freeBotsID: bigint[]];
  export interface OutputObject {
    freeBotsID: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DoneFindingNewTasksEvent {
  export type InputTuple = [unassignedTasksID: BigNumberish[]];
  export type OutputTuple = [unassignedTasksID: bigint[]];
  export interface OutputObject {
    unassignedTasksID: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TaskAssigner extends BaseContract {
  connect(runner?: ContractRunner | null): TaskAssigner;
  waitForDeployment(): Promise<this>;

  interface: TaskAssignerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addTask: TypedContractMethod<
    [good: string, destination: string],
    [void],
    "nonpayable"
  >;

  getOwnTask: TypedContractMethod<
    [],
    [TaskAssigner.TaskStructOutput],
    "nonpayable"
  >;

  readTasks: TypedContractMethod<[], [TaskAssigner.TaskStructOutput[]], "view">;

  robots: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { node_address: string; status: bigint }],
    "view"
  >;

  roundRobin: TypedContractMethod<[], [bigint], "view">;

  tasks: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        good: string;
        destination: string;
        assigner: bigint;
        stage: bigint;
      }
    ],
    "view"
  >;

  updateTaskStatus: TypedContractMethod<
    [taskID: BigNumberish, stage: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addTask"
  ): TypedContractMethod<
    [good: string, destination: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getOwnTask"
  ): TypedContractMethod<[], [TaskAssigner.TaskStructOutput], "nonpayable">;
  getFunction(
    nameOrSignature: "readTasks"
  ): TypedContractMethod<[], [TaskAssigner.TaskStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "robots"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { node_address: string; status: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "roundRobin"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tasks"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        good: string;
        destination: string;
        assigner: bigint;
        stage: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateTaskStatus"
  ): TypedContractMethod<
    [taskID: BigNumberish, stage: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DoneFindingFreeBots"
  ): TypedContractEvent<
    DoneFindingFreeBotsEvent.InputTuple,
    DoneFindingFreeBotsEvent.OutputTuple,
    DoneFindingFreeBotsEvent.OutputObject
  >;
  getEvent(
    key: "DoneFindingNewTasks"
  ): TypedContractEvent<
    DoneFindingNewTasksEvent.InputTuple,
    DoneFindingNewTasksEvent.OutputTuple,
    DoneFindingNewTasksEvent.OutputObject
  >;

  filters: {
    "DoneFindingFreeBots(uint256[])": TypedContractEvent<
      DoneFindingFreeBotsEvent.InputTuple,
      DoneFindingFreeBotsEvent.OutputTuple,
      DoneFindingFreeBotsEvent.OutputObject
    >;
    DoneFindingFreeBots: TypedContractEvent<
      DoneFindingFreeBotsEvent.InputTuple,
      DoneFindingFreeBotsEvent.OutputTuple,
      DoneFindingFreeBotsEvent.OutputObject
    >;

    "DoneFindingNewTasks(uint256[])": TypedContractEvent<
      DoneFindingNewTasksEvent.InputTuple,
      DoneFindingNewTasksEvent.OutputTuple,
      DoneFindingNewTasksEvent.OutputObject
    >;
    DoneFindingNewTasks: TypedContractEvent<
      DoneFindingNewTasksEvent.InputTuple,
      DoneFindingNewTasksEvent.OutputTuple,
      DoneFindingNewTasksEvent.OutputObject
    >;
  };
}
