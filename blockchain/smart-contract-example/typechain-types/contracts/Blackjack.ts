/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface BlackjackInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_BET"
      | "MIN_BET"
      | "bet"
      | "deal"
      | "getCurrentStage"
      | "getDealersFaceUpCardValue"
      | "getGameInfo"
      | "getPlayerInfo"
      | "payout"
      | "play"
      | "players"
      | "token"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BetReceived"
      | "CardDrawn"
      | "CollectedChips"
      | "DealerMoved"
      | "PaidChips"
      | "PlayerMoved"
      | "StageAdvanced"
  ): EventFragment;

  encodeFunctionData(functionFragment: "MAX_BET", values?: undefined): string;
  encodeFunctionData(functionFragment: "MIN_BET", values?: undefined): string;
  encodeFunctionData(functionFragment: "bet", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "deal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentStage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDealersFaceUpCardValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "payout", values?: undefined): string;
  encodeFunctionData(functionFragment: "play", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "MAX_BET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_BET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDealersFaceUpCardValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "play", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}

export namespace BetReceivedEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CardDrawnEvent {
  export type InputTuple = [
    player: AddressLike,
    suit: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [player: string, suit: bigint, value: bigint];
  export interface OutputObject {
    player: string;
    suit: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectedChipsEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DealerMovedEvent {
  export type InputTuple = [dealer: AddressLike];
  export type OutputTuple = [dealer: string];
  export interface OutputObject {
    dealer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaidChipsEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerMovedEvent {
  export type InputTuple = [player: AddressLike];
  export type OutputTuple = [player: string];
  export interface OutputObject {
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StageAdvancedEvent {
  export type InputTuple = [stage: BigNumberish];
  export type OutputTuple = [stage: bigint];
  export interface OutputObject {
    stage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Blackjack extends BaseContract {
  connect(runner?: ContractRunner | null): Blackjack;
  waitForDeployment(): Promise<this>;

  interface: BlackjackInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_BET: TypedContractMethod<[], [bigint], "view">;

  MIN_BET: TypedContractMethod<[], [bigint], "view">;

  bet: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  deal: TypedContractMethod<[], [void], "nonpayable">;

  getCurrentStage: TypedContractMethod<[], [bigint], "view">;

  getDealersFaceUpCardValue: TypedContractMethod<[], [bigint], "view">;

  getGameInfo: TypedContractMethod<
    [],
    [
      [string, bigint, bigint, bigint, bigint, string[]] & {
        numPlayers: bigint;
      }
    ],
    "view"
  >;

  getPlayerInfo: TypedContractMethod<
    [player: AddressLike],
    [[boolean, boolean, bigint, bigint]],
    "view"
  >;

  payout: TypedContractMethod<[], [void], "nonpayable">;

  play: TypedContractMethod<[decision: BigNumberish], [void], "nonpayable">;

  players: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, boolean, boolean, bigint, bigint] & {
        isPlayer: boolean;
        betMade: boolean;
        turnOver: boolean;
        betValue: bigint;
        stackValue: bigint;
      }
    ],
    "view"
  >;

  token: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_BET"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_BET"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bet"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deal"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentStage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDealersFaceUpCardValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGameInfo"
  ): TypedContractMethod<
    [],
    [
      [string, bigint, bigint, bigint, bigint, string[]] & {
        numPlayers: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerInfo"
  ): TypedContractMethod<
    [player: AddressLike],
    [[boolean, boolean, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "payout"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "play"
  ): TypedContractMethod<[decision: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, boolean, boolean, bigint, bigint] & {
        isPlayer: boolean;
        betMade: boolean;
        turnOver: boolean;
        betValue: bigint;
        stackValue: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BetReceived"
  ): TypedContractEvent<
    BetReceivedEvent.InputTuple,
    BetReceivedEvent.OutputTuple,
    BetReceivedEvent.OutputObject
  >;
  getEvent(
    key: "CardDrawn"
  ): TypedContractEvent<
    CardDrawnEvent.InputTuple,
    CardDrawnEvent.OutputTuple,
    CardDrawnEvent.OutputObject
  >;
  getEvent(
    key: "CollectedChips"
  ): TypedContractEvent<
    CollectedChipsEvent.InputTuple,
    CollectedChipsEvent.OutputTuple,
    CollectedChipsEvent.OutputObject
  >;
  getEvent(
    key: "DealerMoved"
  ): TypedContractEvent<
    DealerMovedEvent.InputTuple,
    DealerMovedEvent.OutputTuple,
    DealerMovedEvent.OutputObject
  >;
  getEvent(
    key: "PaidChips"
  ): TypedContractEvent<
    PaidChipsEvent.InputTuple,
    PaidChipsEvent.OutputTuple,
    PaidChipsEvent.OutputObject
  >;
  getEvent(
    key: "PlayerMoved"
  ): TypedContractEvent<
    PlayerMovedEvent.InputTuple,
    PlayerMovedEvent.OutputTuple,
    PlayerMovedEvent.OutputObject
  >;
  getEvent(
    key: "StageAdvanced"
  ): TypedContractEvent<
    StageAdvancedEvent.InputTuple,
    StageAdvancedEvent.OutputTuple,
    StageAdvancedEvent.OutputObject
  >;

  filters: {
    "BetReceived(address,uint256)": TypedContractEvent<
      BetReceivedEvent.InputTuple,
      BetReceivedEvent.OutputTuple,
      BetReceivedEvent.OutputObject
    >;
    BetReceived: TypedContractEvent<
      BetReceivedEvent.InputTuple,
      BetReceivedEvent.OutputTuple,
      BetReceivedEvent.OutputObject
    >;

    "CardDrawn(address,uint8,uint8)": TypedContractEvent<
      CardDrawnEvent.InputTuple,
      CardDrawnEvent.OutputTuple,
      CardDrawnEvent.OutputObject
    >;
    CardDrawn: TypedContractEvent<
      CardDrawnEvent.InputTuple,
      CardDrawnEvent.OutputTuple,
      CardDrawnEvent.OutputObject
    >;

    "CollectedChips(address,uint256)": TypedContractEvent<
      CollectedChipsEvent.InputTuple,
      CollectedChipsEvent.OutputTuple,
      CollectedChipsEvent.OutputObject
    >;
    CollectedChips: TypedContractEvent<
      CollectedChipsEvent.InputTuple,
      CollectedChipsEvent.OutputTuple,
      CollectedChipsEvent.OutputObject
    >;

    "DealerMoved(address)": TypedContractEvent<
      DealerMovedEvent.InputTuple,
      DealerMovedEvent.OutputTuple,
      DealerMovedEvent.OutputObject
    >;
    DealerMoved: TypedContractEvent<
      DealerMovedEvent.InputTuple,
      DealerMovedEvent.OutputTuple,
      DealerMovedEvent.OutputObject
    >;

    "PaidChips(address,uint256)": TypedContractEvent<
      PaidChipsEvent.InputTuple,
      PaidChipsEvent.OutputTuple,
      PaidChipsEvent.OutputObject
    >;
    PaidChips: TypedContractEvent<
      PaidChipsEvent.InputTuple,
      PaidChipsEvent.OutputTuple,
      PaidChipsEvent.OutputObject
    >;

    "PlayerMoved(address)": TypedContractEvent<
      PlayerMovedEvent.InputTuple,
      PlayerMovedEvent.OutputTuple,
      PlayerMovedEvent.OutputObject
    >;
    PlayerMoved: TypedContractEvent<
      PlayerMovedEvent.InputTuple,
      PlayerMovedEvent.OutputTuple,
      PlayerMovedEvent.OutputObject
    >;

    "StageAdvanced(uint8)": TypedContractEvent<
      StageAdvancedEvent.InputTuple,
      StageAdvancedEvent.OutputTuple,
      StageAdvancedEvent.OutputObject
    >;
    StageAdvanced: TypedContractEvent<
      StageAdvancedEvent.InputTuple,
      StageAdvancedEvent.OutputTuple,
      StageAdvancedEvent.OutputObject
    >;
  };
}
